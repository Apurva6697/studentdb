# -*- coding: utf-8 -*-
"""StudentsDB.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-_7dUleQOEoe5T4Tfi1eYDRSysmZ15Tv
"""

import pandas as pd
import numpy as np
import json

import pymongo

se=pymongo.MongoClient("mongodb://apurva:apurva@cluster0-shard-00-00.yewla.mongodb.net:27017,cluster0-shard-00-01.yewla.mongodb.net:27017,cluster0-shard-00-02.yewla.mongodb.net:27017/myFirstDatabase?ssl=true&replicaSet=atlas-118hpd-shard-0&authSource=admin&retryWrites=true&w=majority")

db = se["Student"]
collect = db["collect"]

data = []
with open("/content/students (1).json")as j:
  data=[json.loads(l) for l in j]

df = pd.DataFrame(data)
df

for i in range(len(data)):
 db.collect.insert_many(data[i])

df

x = db.collect.aggregate([{'$unwind':'$scores'}])
l = []
for i in x:
    l.append(i)
l

"""MAX SCORES"""

x = db.collect.aggregate([{'$unwind':'$scores'},{'$group':{'_id':{'type':"$scores.type"},"max_score:":{'$max':"$scores.score"}}}])
for i in x:
  print(i)

"""x = db.collect.aggregate([
    {'$unwind':'$scores'},
    {'$group':{'_id':{'type':"$scores.type"},
               "pass_mark:":{ "percentage": { 
                "$multiply":  { "$divide": "$scores.score" } "%" ]}
           }}])
for i in x:
  print(i)"""

for i in (range(0,199)):
    db.print(i)

for i in collect.find():
    print(i)

"""PASS_OUTS"""

x = db.collect.aggregate({'$unwind':'$scores'},{'$group':{'_id':{'type':"$scores.type"},{"Pass:":{"$sum":{"$gte":40}}})
for i in x:
  print(i)

x = db.collect.aggregate([{'$unwind':'$scores'},{'$group':{'_id':{'type':'name'},"sum:":{'$sum':"$scores.exam"}}}])
for i in x:
  print(i)

db.collect['all'].aggregate([
  {"$match":
    {'Name': 1,[{'$unwind':'$scores'},{'$group':{'_id':{'type':"$scores.type"},"max_score:":{'$max':"$scores.score"}}}]}])

y = db.collect.find({"name":1},{{'$unwind':'$scores'},{"scores" : { "$elemMatch":{"score":{"$gt": 40}}}}})
for i in y:
    print(i)

"""BY PANDAS"""

df1=unwind

dfpass = df1_unwind.groupby(["name"])["scores"].agg(["max"])

df_unwind.describe()

df_unwind['scores'].apply(pd.Series)

df_new = pd.concat([df_unwind.drop(['scores'], axis=1), df_unwind['scores'].apply(pd.Series)], axis=1)
df_new

df_new.describe()

df_new.groupby(["name"])["score"].agg([max])

df10 = df_new[df_new["type"] == "exam"]
df10

df10.groupby(["type"])["score","name"].agg(["max"])

df11 = df_new[df_new["type"] == "quiz"]
df11.groupby(["type"])["score","name"].agg(["max"])

df12 = df_new[df_new["type"] == "homework"]
df12.groupby(["type"])["score","name"].agg(["max"])

filter = df11["score"]== 99.80348240553108
df11.where(filter, inplace = True)
df11

df11.get(["score"] == 99.80348240553108 )
df11

"""USING MONGODB"""

for i in collect:
  try:
   query=db.collect.find({'$scores.score':i.max_score})
   if query:
      for j in query:
        print(j.name)
  except: 
    pass

x = db.collect.aggregate([
    {
        '$unwind': '$scores'
    }, {
        '$project': {
            'name': 1, 
            'scores': 1
        }
    }, {
        '$group': {
            '_id': {
                'type': '$scores.type'
            }, 
            'max_score': {
                '$max': '$scores.score'
            }, 
            'name': {
                '$first': '$name'
            }
        }
    }
])
for i in x:
    print(i)

myq ={'scores':{'score':99.33685767140612, 'type':'exam'}}
y = collect.find(myq,{'_id':0,'name':1,'type':'exam','score':99.33685767140612})
for i in y:
  print(i)

myq ={'scores':{'score':99.77237745070993, 'type':'homework'}}
y = collect.find(myq,{'_id':0,'name':1,'type':'homework'})
for i in y:
  print(i)

myq ={'scores':{'score':99.80348240553108, 'type':'quiz'}}
y = collect.find(myq,{'_id':0,'name':1,'type':'quiz'})
for i in y:
  print(i)

"""SUM"""

collect.aggregate([{
  '$group': {
    '$objects': {'$push': 'name'},
  },
}, {
  '$aggregate': {
    'scores': 1
     {
        '$unwind': '$scores'
    },
    "$sum":{"$scores.score","$scores.type" == "exam"},
  }
}])

"""AVERAGE"""

collect.aggregate([{
  '$group': {
    '$objects': {'$push': 'name'},
  },
}, {
  '$aggregate': {
    'scores': 1
     {
        '$unwind': '$scores'
    },
    "$avg":{"$scores.score","$scores.type" == "exam"},
  }
}])